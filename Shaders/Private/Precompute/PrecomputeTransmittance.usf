#pragma once

// ReSharper disable once CppUnusedIncludeDirective
#include "/Engine/Public/Platform.ush" // required import

#include "PrecomputeCommon.ush"
#include "../Transmittance.ush"
#include "../Intersection.ush"

/**
 * The buffer to write transmittance data to.
 */
RWBuffer<float4> TransmittanceTextureOut;

int TransmittanceTextureWidth;
int TransmittanceTextureHeight;

/**
 * The amount of density samples to take along the ray.
 */
int NumSteps;

DEFINE_PRECOMPUTE_CONTEXT_PARAMETERS()

NUMTHREADS_2D void PrecomputeTransmittanceCS(
	uint3 id : SV_DispatchThreadID)
{
	const float2 uv = float2(id.xy) / float2(TransmittanceTextureWidth, TransmittanceTextureHeight);

	PrecomputeContext Ctx;
	LOAD_PRECOMPUTE_CONTEXT_PARAMETERS(Ctx);

	// similar to O'Neil 2004, calculate transmittance for every combination of
	// starting height in atmosphere               (x axis) and
	// view angle relative to the planet up vector (y axis).
	// since every slice through the atmosphere that includes its center is identical,
	// we can break this down into 2-dimensional calculations.

	// relative height in atmosphere encoded on x axis
	const float Height01 = uv.x;

	// decode 2d view direction from view angle.
	const float y = -2 * uv.y + 1; // dot product of view direction and the vector from atmosphere center to ray origin, in range -1..1
	const float x = sin(acos(y));  // acos(y) is the angle between the two vectors in radians
	const float2 RayDir = normalize(float2(x, y));

	// the view ray starts inside (or on the top border of) the atmosphere,
	// perfectly lined up with the planet and sun.
	const float2 RayOrigin = float2(0, lerp(1, 1 + Ctx.AtmosphereScale, Height01));
	float AtmosphereEntryDistance, AtmosphereExitDistance;
	RayCircle(RayOrigin, RayDir, 1 + Ctx.AtmosphereScale, AtmosphereEntryDistance, AtmosphereExitDistance);

	const float RayStart = AtmosphereEntryDistance;
	const float RayEnd = AtmosphereExitDistance;

	// calculate the transmittance through the atmosphere for the given view direction/height combination.
	const float3 Transmittance = ComputeTransmittance(Ctx,
		RayOrigin + RayStart * RayDir, RayDir,
		RayEnd - RayStart, NumSteps);
	TransmittanceTextureOut[id.x * TransmittanceTextureWidth + id.y] = float4(Transmittance, 1);
}