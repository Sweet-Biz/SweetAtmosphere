#pragma once

// ReSharper disable once CppUnusedIncludeDirective
#include "/Engine/Public/Platform.ush" // required import

#include "PrecomputeCommon.ush"
#include "../Transmittance.ush"
#include "../Intersection.ush"

#ifndef FAR_SIDE_RING_HACK
	#define FAR_SIDE_RING_HACK 0
#endif

/**
 * The precomputed transmittance.
 */
Buffer<float4> TransmittanceTextureIn;

int TransmittanceTextureWidth;
int TransmittanceTextureHeight;

/**
 * The output buffer to write in-scattering data to.
 */
RWBuffer<float4> InScatteredLightTextureOut;

/**
 * The width, height, and depth of the in-scattered light texture.
 * Unused when 3D textures are supported, but the parameter
 * stays to keep a consistent memory layout across platforms.
 */
int InScatteredLightTextureSize;

/**
 * The amount of samples to take along the view ray.
 */
int NumSteps;

DEFINE_PRECOMPUTE_CONTEXT_PARAMETERS()

#define RAY_EPSILON 0.01

NUMTHREADS_3D void PrecomputeInScatteredLightCS(
	uint3 id : SV_DispatchThreadID)
{
	const float3 uv = float3(id.xyz) / InScatteredLightTextureSize;

	PrecomputeContext Ctx;
	LOAD_PRECOMPUTE_CONTEXT_PARAMETERS(Ctx);

	// according to Schafhitzel 2007, calculate in-scattered light for every combination of
	// starting height in atmosphere               (x axis),
	// view angle relative to the planet up vector (y axis),
	// sun angle relative to the planet up vector  (z axis).
	// since every slice through the atmosphere that includes its center is identical,
	// we can break this down into 2-dimensional calculations.

	// relative height in atmosphere encoded on x axis
	const float Height01 = uv.x;

	// the direction of the view ray encoded on y axis
	float2 RayDir;
	{
		const float y = -2 * uv.y + 1; // dot product of view direction and the vector from atmosphere center to ray origin, in range -1..1
		const float x = sin(acos(y));  // acos(y) is the angle between the two vectors in radians
		RayDir = normalize(float2(x, y));
	}

	// the direction from which sunlight comes encoded on z axis.
	// Is assumed to be parallel for all rays.
	float2 SunLightDir;
	{
		const float y = -2 * uv.z + 1; // dot product of sun direction and the vector from atmosphere center to ray origin, in range -1..1
		const float x = sin(acos(y));  // acos(y) is the angle between the two vectors in radians
		SunLightDir = normalize(float2(x, y));
	}

	const float CosAngleViewRaySunRay = dot(RayDir, -SunLightDir);

	// the view ray starts inside (or on the top border of) the atmosphere,
	// perfectly lined up with the planet.
	const float2 RayOrigin = float2(0, lerp(1, 1 + Ctx.AtmosphereScale, Height01));
	float AtmosphereEntryDistance, AtmosphereExitDistance;
	RayCircle(RayOrigin, RayDir, 1 + Ctx.AtmosphereScale, AtmosphereEntryDistance, AtmosphereExitDistance);

	float RayStart = AtmosphereEntryDistance;
	float RayEnd = AtmosphereExitDistance;

	// end ray when it hits the planet
	float PlanetEntryDistance, PlanetExitDistance;
	if (RayCircle(RayOrigin, RayDir, 1, PlanetEntryDistance, PlanetExitDistance))
	{
		RayEnd = PlanetEntryDistance;
	}

	RayStart += RAY_EPSILON;
	RayEnd -= RAY_EPSILON;
	const float RayLength = RayEnd - RayStart;
	const float StepSize = RayLength / NumSteps;

	float3 InScatteredLight = 0;
	float3 ViewRayTransmittance = 1;

	// sample in-scattering along the view ray
	for (int i = 0; i < NumSteps; i++)
	{
		// the current position along the view ray
		const float2 RayPos = RayOrigin + (RayStart + (i + 0.5) * StepSize) * RayDir;

		const float PosHeight = length(RayPos) - 1;
		const float PosHeight01 = saturate(PosHeight / Ctx.AtmosphereScale);

		// calculate transmittance towards the sun
		float3 SunRayTransmittance;
		{
			const float2 DirToSunRayOrigin = normalize(RayPos);
			const float SunRayDot = dot(DirToSunRayOrigin, -SunLightDir);
			SunRayTransmittance = GetTransmittance(
				TransmittanceTextureIn,
				uint2(TransmittanceTextureWidth, TransmittanceTextureHeight),
				PosHeight01, SunRayDot);
		}

		// calculate the density at the current sample point.
		// it determines how much in-scattering can occur here.
		const float3 LocalScattering = ComputeCombinedScatteringCoefficients(Ctx, PosHeight01);
		ViewRayTransmittance *= exp(-LocalScattering * StepSize);

		const float3 InScatterCoeffs = exp(-ComputeInScatteringCoefficients(Ctx, PosHeight01, CosAngleViewRaySunRay) * StepSize);

		const float3 Transmittance = SunRayTransmittance * ViewRayTransmittance;
		InScatteredLight += LocalScattering * StepSize * Transmittance * InScatterCoeffs;
	}
#if FAR_SIDE_RING_HACK
	if (length(RayOrigin) > length(RayOrigin - SunLightDir))
	{
		// the ray starts on the hemisphere pointing away from the sun.

		// at low scattering strengths, a ring of red light
		// can occur on the planet side opposite from the sun.
		// this is a hack to remove it by fading out any
		// in-scattered light that goes through the planet center.
		InScatteredLight *= 1 - smoothstep(0.05, 0.35, CosAngleViewRaySunRay);

		// is this caused by rays accumulating in-scattered light through the planet's body?
		// TODO: investigate causes and alternate fixes, such as density = 0 at planet body?
	}
#endif

	InScatteredLightTextureOut[id.z * InScatteredLightTextureSize * InScatteredLightTextureSize
		+ id.y * InScatteredLightTextureSize
		+ id.x] = float4(InScatteredLight.rgb, 1);
}