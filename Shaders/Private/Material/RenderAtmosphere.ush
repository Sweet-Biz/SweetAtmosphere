#pragma once

// This file is safe for inclusion in Material graph custom nodes.
// Add the following line at the top of the node's code:
// #include "/SweetAtmosphere/Material/RenderAtmosphere.ush"
// Add the following path to "Include File Paths" on the custom material node:
// /SweetAtmosphere/Material/RenderAtmosphere.inc.ush

#ifdef __JETBRAINS_IDE__
	#include "RenderAtmosphere.inc.ush"
#endif

/**
 * Use this macro in your material node's code to render the atmosphere using the following variables:
 *
 * Texture2D TransmittanceTexture
 * Texture3D InScatteredLightTexture

 * float AtmosphereScale
 * float SunIntensity
 * float HueShift
 *
 * float3 PlanetOrigin
 * float PlanetRadius
 * float3 SunOrigin
 * float3 RayOrigin
 * float3 RayDir
 *
 * float SceneDepth
 * float3 SceneNormal
 *
 * out float3 InScatteredLight
 * out float3 Color
 */
#define RENDER_ATMOSPHERE()                                   \
	float3 SunLightDir = normalize(PlanetOrigin - SunOrigin); \
	RenderContext Ctx;                                        \
	LOAD_RENDER_CONTEXT_PARAMETERS(Ctx)                       \
	AtmosphereRenderer R;                                     \
	R.Render(Ctx,                                             \
		RayOrigin, RayDir, SceneDepth, SceneNormal,           \
		InScatteredLight, Color);

/**
 * Use this macro in your material node's code to render the skybox using the following variables:
 *
 * Texture2D TransmittanceTexture
 * Texture3D InScatteredLightTexture
 * float AtmosphereScale
 * float SunIntensity
 * float HueShift
 *
 * float3 SunLightDir
 * float3 RayDir
 *
 * out float3 InScatteredLight
 * out float3 Color
 */
#define RENDER_SKYBOX()                 \
	float3 PlanetOrigin = 0;            \
	float PlanetRadius = 1;             \
	RenderContext Ctx;                  \
	LOAD_RENDER_CONTEXT_PARAMETERS(Ctx) \
	AtmosphereRenderer R;               \
	R.Render(Ctx,                       \
		0, RayDir, -1, 0,               \
		InScatteredLight, Color);

struct AtmosphereRenderer
{
	/**
	 * Renders the atmosphere for the given view ray.
	 *
	 * @param Ctx The render context.
	 * @param RayOrigin The view ray origin.
	 * @param RayDir The normalized view ray direction.
	 * @param SceneDepth The distance along the ray at which it is stopped by a surface.
	 * @param SceneNormal The normal of the surface that the ray hits.
	 * @param InScatteredLightOut The in-scattered light coming in along the view ray.
	 * @param ColorOut The color to apply to the material's emissive color.
	 */
	void Render(
		const RenderContext Ctx,
		const float3 RayOrigin,
		const float3 RayDir,
		const float SceneDepth,
		const float3 SceneNormal,
		out float3 InScatteredLightOut,
		out float3 ColorOut)
	{
		InScatteredLightOut = ColorOut = 0;

		// find atmosphere entry and exit point
		float AtmosphereEntry, AtmosphereExit;
		if (!RaySphere(RayOrigin, RayDir, Ctx.PlanetOrigin, Ctx.AtmosphereRadius, AtmosphereEntry, AtmosphereExit))
		{
			// the view ray does not intersect the atmosphere.
			return;
		}

		// determine intersection with planet radius
		float PlanetEntry, PlanetExit;
		RaySphere(RayOrigin, RayDir, Ctx.PlanetOrigin, Ctx.PlanetRadius, PlanetEntry, PlanetExit);

		float RayStart = AtmosphereEntry;
		if (PlanetEntry <= 0 && PlanetExit > 0)
		{
			// the ray starts from inside the planet -
			// start on the surface of the planet
			RayStart = PlanetExit;
		}

		float RayEnd = AtmosphereExit;

		if (SceneDepth >= 0)
		{
			RayEnd = min(RayEnd, SceneDepth);
		}

		if (PlanetEntry > 0)
		{
			RayEnd = min(RayEnd, PlanetEntry);
		}

		if (RayEnd < RayStart)
		{
			// the atmosphere is occluded
			ColorOut = 1;
			return;
		}

		// get in-scattered light along the view ray
		const float3 RayStartPos = RayOrigin + (RayStart + RAY_EPSILON) * RayDir;

		if (RayEnd >= AtmosphereExit)
		{
			// the ray can pass through the atmosphere unobstructed
			InScatteredLightOut = GetInScatteredLight(Ctx, RayStartPos, RayDir);
		}
		else
		{
			const float SubtractionFactor = 1.2;

			// the ray hits terrain before exiting the atmosphere.
			const float3 RayEndPos = RayOrigin + (RayEnd - 2 * RAY_EPSILON) * RayDir;

			// if we hit the planet before exiting the atmosphere, cast the ray in reverse.
			// this yields better results than casting forward and subtracting what lies after the end.
			InScatteredLightOut = GetInScatteredLight(Ctx, RayEndPos, -RayDir)
				- GetInScatteredLight(Ctx, RayStartPos, -RayDir)
					* SubtractionFactor; // hack to hide some circular visual artifacts

			// Lambertian reflection formula -
			// to avoid unnaturally lit surfaces at the horizon,
			// ensure that they can only be brightened by in-scattered light in the foreground
			// if the surface normal points towards the sun.
			InScatteredLightOut *= max(0, dot(-Ctx.SunLightDir, SceneNormal)) / PI;
		}

		InScatteredLightOut *= Ctx.SunIntensity;
		ColorOut = InScatteredLightOut;

		if (Ctx.HueShift)
		{
			ColorOut = ShiftHue(ColorOut, Ctx.HueShift);
		}
	}
};
